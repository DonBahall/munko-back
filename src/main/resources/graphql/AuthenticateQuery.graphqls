type Query {
    authenticate(email: String!, password: String!): String
    registration(user: UserInput!): User
    getAllItems: [FunkoPop!]!
    getItem(id: Int!): FunkoPop
}

type FunkoPop{
    id: Int!
    name: String!
    images: [String]
    price: Int!
    amount: Int
    description: String
    sale: Boolean
    license: String
    sublicense: String
    series: String
    category: String
    productType: String
    date: String
}

type User{
    id:Int!
    firstName:String!
    lastName:String!
    email:String!
    phone:String!
    password:String!
    address: Address
    orders: [Order]
    role: String!
}
type Address{
    id:Int!
    userId:Int!
    locality:String
    postOffice:String
}
type Order{
    id: Int!
    user: User
    funkoId: Int
    amount: Int
}
input UserInput{
    id:Int!
    firstName:String!
    lastName:String!
    email:String!
    phone:String!
    password:String!
    address: AddressInput
    orders:[OrderInput]
    role: String!
}

input OrderInput{
    id: Int!
    user: UserInput
    funkoId: Int
    amount: Int
}

input AddressInput{
    id:Int!
    userId:Int!
    locality:String
    postOffice:String
}