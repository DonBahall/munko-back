type Query {
    authenticate(email: String!, password: String!): String
    getAllItems(paging: SearchPaging, orderBy: OrderBy, searchCriteria: FunkoSearchCriteria): FunkoPops!
    getItem(id: Int!): FunkoPop
}

type FunkoPops{
    items: [FunkoPop!]!
    paging: Paging!
}

type FunkoPop{
    id: Int!
    name: String!
    images: [String]
    price: Int!
    amount: Int
    description: String
    sale: Boolean
    license: String
    sublicense: String
    series: String
    category: String
    productType: String
    date: String
}

type User{
    id: Int!
    firstName: String!
    lastName: String
    email: String!
    phone: String
    password: String!
    address: Address
    orders: [Order]
    role: String
    favorite: [Int]
}

type Address{
    id:Int!
    userId:Int!
    locality:String
    postOffice:String
}

type Order{
    id: Int!
    user: User
    funkoId: Int
    amount: Int
}

input FunkoSearchCriteria {
    name: String
    price: Price
    series: String
    category: String
}

input UserInput{
    id: Int
    firstName:String!
    lastName:String
    email:String!
    phone:String
    password:String!
    address: AddressInput
    orders:[OrderInput]
    role: String
}

input OrderInput{
    id: Int
    user: UserInput
    funkoId: Int
    amount: Int
}

input AddressInput{
    id: Int
    userId: Int!
    locality: String
    postOffice: String
}